require("dotenv").config();
const fs = require("fs");
const TelegramBot = require("node-telegram-bot-api");
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const text = msg.text;

  addUser(userId, msg.from.first_name);

  if (!text) return;

  const match = text.match(/#pushups(\d+)/i); // –∏—â–µ–º —Ö—ç—à—Ç–µ–≥ —Ç–∏–ø–∞ #pushups15

  if (match) {
    const count = parseInt(match[1]);
    completePushups(userId, count);

    bot.sendMessage(
      chatId,
      `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: ${msg.from.first_name} —Å–¥–µ–ª–∞–ª(–∞) ${count} –æ—Ç–∂–∏–º–∞–Ω–∏–π!`
    );
  }
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const data = loadData();

  if (!data.users || Object.keys(data.users).length === 0) {
    bot.sendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö.");
    return;
  }

  let message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n";

  for (const userId in data.users) {
    const user = data.users[userId];
    message += `${user.name} ‚Äî ${user.total} –æ—Ç–∂–∏–º–∞–Ω–∏–π (–¥–æ–ª–≥: ${user.debt})\n`;
  }

  bot.onText(/\/me/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const data = loadData();

    if (!data.users || !data.users[userId]) {
      bot.sendMessage(chatId, "–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ —á–µ–ª–µ–Ω–¥–∂–µ.");
      return;
    }

    const user = data.users[userId];
    const message = `üë§ ${user.name}\n\n–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π: ${user.total}\n–î–æ–ª–≥: ${user.debt}`;
    bot.sendMessage(chatId, message);
  });

  bot.sendMessage(chatId, message);
});

bot.onText(/\/resetMe/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const data = loadData();

  if (!data.users || !data.users[userId]) {
    bot.sendMessage(chatId, "–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ —á–µ–ª–µ–Ω–¥–∂–µ.");
    return;
  }

  resetStats(userId);
  bot.sendMessage(chatId, "‚úÖ –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.");
});

function loadData() {
  return JSON.parse(fs.readFileSync("data.json", "utf-8"));
}

function saveData(data) {
  fs.writeFileSync("data.json", JSON.stringify(data, null, 2));
}

function addUser(id, name) {
  const data = loadData();

  if (!data.users[id]) {
    data.users[id] = {
      name,
      total: 0,
      debt: 0,
    };
    console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    saveData(data);
  } else {
    console.log(`‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${id} —É–∂–µ –µ—Å—Ç—å.`);
  }
}

function completePushups(id, count) {
  const data = loadData();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫
  if (!data.users || !data.users[id]) {
    console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  const user = data.users[id];
  user.total += count;

  // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ–ª–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (user.debt > 0) {
    const paid = Math.min(user.debt, count);
    user.debt -= paid;
    console.log(`‚úÖ ${paid} –æ—Ç–∂–∏–º–∞–Ω–∏–π —Å–ø–∏—Å–∞–Ω–æ —Å –¥–æ–ª–≥–∞.`);
  }

  console.log(
    `‚úÖ ${user.name} —Å–¥–µ–ª–∞–ª(–∞) ${count} –æ—Ç–∂–∏–º–∞–Ω–∏–π. –í—Å–µ–≥–æ: ${user.total}`
  );
  saveData(data);
}

function resetStats(userId) {
  const data = loadData();

  if (!data.users[userId]) {
    return;
  }

  data.users[userId].total = 0;
  data.users[userId].debt = 0;
  saveData(data);
  console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω–∞.`);
}
