require("dotenv").config();
const fs = require("fs");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// üì© –ü—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const text = msg.text;

  saveChatIdIfMissing(chatId);
  addUser(userId, msg.from.first_name);

  if (!text) return;

  const match = text.match(/#pushups(\d+)/i);
  if (match) {
    const count = parseInt(match[1]);
    completePushups(userId, count);

    bot.sendMessage(
      chatId,
      `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: ${msg.from.first_name} —Å–¥–µ–ª–∞–ª(–∞) ${count} –æ—Ç–∂–∏–º–∞–Ω–∏–π!`
    );
  }
});

// üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const data = loadData();

  if (!data.users || Object.keys(data.users).length === 0) {
    bot.sendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö.");
    return;
  }

  let message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n";
  for (const userId in data.users) {
    const user = data.users[userId];
    message += `${user.name} ‚Äî ${user.total} –æ—Ç–∂–∏–º–∞–Ω–∏–π (–¥–æ–ª–≥: ${user.debt})\n`;
  }

  bot.sendMessage(chatId, message);
});

// üôã –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.onText(/\/me/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const data = loadData();

  if (!data.users || !data.users[userId]) {
    bot.sendMessage(chatId, "–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ —á–µ–ª–µ–Ω–¥–∂–µ.");
    return;
  }

  const user = data.users[userId];
  const message = `üë§ ${user.name}\n\n–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π: ${user.total}\n–î–æ–ª–≥: ${user.debt}`;
  bot.sendMessage(chatId, message);
});

// üîÑ –°–±—Ä–æ—Å —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/\/resetMe/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const data = loadData();

  if (!data.users || !data.users[userId]) {
    bot.sendMessage(chatId, "–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ —á–µ–ª–µ–Ω–¥–∂–µ.");
    return;
  }

  resetStats(userId);
  bot.sendMessage(chatId, "‚úÖ –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.");
});

// üïò –£—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç—ã
cron.schedule("0 9 * * *", () => {
  console.log("‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç");
  sendDailyReport();
});

cron.schedule("0 21 * * *", () => {
  console.log("üåô –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç");
  sendDailyReport();
});

// ========== –§–£–ù–ö–¶–ò–ò ==========

function loadData() {
  try {
    return JSON.parse(fs.readFileSync("data.json", "utf-8"));
  } catch {
    return { users: {}, chatIds: [] };
  }
}

function saveData(data) {
  fs.writeFileSync("data.json", JSON.stringify(data, null, 2));
}

function addUser(id, name) {
  const data = loadData();

  if (!data.users[id]) {
    data.users[id] = { name, total: 0, debt: 0 };
    console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    saveData(data);
  }
}

function completePushups(id, count) {
  const data = loadData();

  if (!data.users || !data.users[id]) {
    console.log(`‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  const user = data.users[id];
  user.total += count;

  if (user.debt > 0) {
    const paid = Math.min(user.debt, count);
    user.debt -= paid;
    console.log(`‚úÖ ${paid} –æ—Ç–∂–∏–º–∞–Ω–∏–π —Å–ø–∏—Å–∞–Ω–æ —Å –¥–æ–ª–≥–∞.`);
  }

  console.log(
    `‚úÖ ${user.name} —Å–¥–µ–ª–∞–ª(–∞) ${count} –æ—Ç–∂–∏–º–∞–Ω–∏–π. –í—Å–µ–≥–æ: ${user.total}`
  );
  saveData(data);
}

function resetStats(userId) {
  const data = loadData();

  if (!data.users[userId]) return;

  data.users[userId].total = 0;
  data.users[userId].debt = 0;
  saveData(data);
  console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–±—Ä–æ—à–µ–Ω–∞.`);
}

function sendDailyReport() {
  const data = loadData();
  const today = new Date();
  const dayNumber =
    Math.floor((today - new Date("2024-05-01")) / (1000 * 60 * 60 * 24)) + 1;
  const requiredPushups = 10 + dayNumber - 1;

  let message = `üìÖ –î–µ–Ω—å ${dayNumber}: —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ${requiredPushups} –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n\n`;

  for (const userId in data.users) {
    const user = data.users[userId];
    message += `${user.name} ‚Äî –¥–æ–ª–≥: ${user.debt}, –≤—Å–µ–≥–æ: ${user.total}\n`;
    user.debt += requiredPushups;
  }

  saveData(data);

  if (data.chatIds && data.chatIds.length > 0) {
    for (const chatId of data.chatIds) {
      bot.sendMessage(chatId, message);
    }
  } else {
    console.log("‚ùó –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö chatId –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }
}

function saveChatIdIfMissing(chatId) {
  const data = loadData();
  if (!data.chatIds) data.chatIds = [];

  if (!data.chatIds.includes(chatId)) {
    data.chatIds.push(chatId);
    saveData(data);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π chatId: ${chatId}`);
  }
}
